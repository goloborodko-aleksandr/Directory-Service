// <auto-generated />
using System;
using System.Collections.Generic;
using DirectoryService.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DirectoryService.Infrastructure.Migrations
{
    [DbContext(typeof(DirectoryServiceDbContext))]
    partial class DirectoryServiceDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("DirectoryService.Domain.ConnectionEntity.DepartmentLocation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("department_id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("location_id")
                        .HasColumnType("uuid");

                    b.HasKey("Id")
                        .HasName("pk_department_location");

                    b.HasIndex("department_id");

                    b.HasIndex("location_id");

                    b.ToTable("DepartmentLocations");
                });

            modelBuilder.Entity("DirectoryService.Domain.ConnectionEntity.DepartmentPosition", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("department_id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("position_id")
                        .HasColumnType("uuid");

                    b.HasKey("Id")
                        .HasName("pk_department_position");

                    b.HasIndex("department_id");

                    b.HasIndex("position_id");

                    b.ToTable("DepartmentPositions");
                });

            modelBuilder.Entity("DirectoryService.Domain.DepartmentEntity.Department", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<short>("Depth")
                        .HasColumnType("smallint")
                        .HasColumnName("depth");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uuid")
                        .HasColumnName("parent_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.ComplexProperty<Dictionary<string, object>>("Identifier", "DirectoryService.Domain.DepartmentEntity.Department.Identifier#Identifier", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(150)
                                .HasColumnType("character varying(150)")
                                .HasColumnName("identifier");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("Name", "DirectoryService.Domain.DepartmentEntity.Department.Name#Name", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(150)
                                .HasColumnType("character varying(150)")
                                .HasColumnName("name");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("Path", "DirectoryService.Domain.DepartmentEntity.Department.Path#Path", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("path");
                        });

                    b.HasKey("Id")
                        .HasName("pk_department");

                    b.HasIndex("ParentId");

                    b.ToTable("departments", (string)null);
                });

            modelBuilder.Entity("DirectoryService.Domain.LocationEntity.Location", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.ComplexProperty<Dictionary<string, object>>("Address", "DirectoryService.Domain.LocationEntity.Location.Address#Address", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("AdditionalInfo")
                                .HasColumnType("text")
                                .HasColumnName("additional_info");

                            b1.Property<string>("Apartment")
                                .HasColumnType("text")
                                .HasColumnName("apartment");

                            b1.Property<string>("Building")
                                .HasColumnType("text")
                                .HasColumnName("building");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("city");

                            b1.Property<string>("Country")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("country");

                            b1.Property<string>("District")
                                .HasColumnType("text")
                                .HasColumnName("district");

                            b1.Property<string>("HouseNumber")
                                .HasColumnType("text")
                                .HasColumnName("house_number");

                            b1.Property<string>("Region")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("region");

                            b1.Property<string>("Street")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("street");

                            b1.Property<string>("ZipCode")
                                .HasColumnType("text")
                                .HasColumnName("zip_code");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("Name", "DirectoryService.Domain.LocationEntity.Location.Name#Name", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(120)
                                .HasColumnType("character varying(120)")
                                .HasColumnName("name");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("Timezone", "DirectoryService.Domain.LocationEntity.Location.Timezone#TimeZone", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("timezone");
                        });

                    b.HasKey("Id")
                        .HasName("pk_location");

                    b.ToTable("locations", (string)null);
                });

            modelBuilder.Entity("DirectoryService.Domain.PositionEntity.Position", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1500)
                        .HasColumnType("character varying(1500)")
                        .HasColumnName("description");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.ComplexProperty<Dictionary<string, object>>("Name", "DirectoryService.Domain.PositionEntity.Position.Name#Name", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasColumnName("name");
                        });

                    b.HasKey("Id")
                        .HasName("pk_position");

                    b.ToTable("positions", (string)null);
                });

            modelBuilder.Entity("DirectoryService.Domain.ConnectionEntity.DepartmentLocation", b =>
                {
                    b.HasOne("DirectoryService.Domain.DepartmentEntity.Department", "Department")
                        .WithMany("DepartmentLocations")
                        .HasForeignKey("department_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DirectoryService.Domain.LocationEntity.Location", "Location")
                        .WithMany("DepartmentLocations")
                        .HasForeignKey("location_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");

                    b.Navigation("Location");
                });

            modelBuilder.Entity("DirectoryService.Domain.ConnectionEntity.DepartmentPosition", b =>
                {
                    b.HasOne("DirectoryService.Domain.DepartmentEntity.Department", "Department")
                        .WithMany("DepartmentPositions")
                        .HasForeignKey("department_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DirectoryService.Domain.PositionEntity.Position", "Position")
                        .WithMany("DepartmentPositions")
                        .HasForeignKey("position_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");

                    b.Navigation("Position");
                });

            modelBuilder.Entity("DirectoryService.Domain.DepartmentEntity.Department", b =>
                {
                    b.HasOne("DirectoryService.Domain.DepartmentEntity.Department", null)
                        .WithMany("Children")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("DirectoryService.Domain.DepartmentEntity.Department", b =>
                {
                    b.Navigation("Children");

                    b.Navigation("DepartmentLocations");

                    b.Navigation("DepartmentPositions");
                });

            modelBuilder.Entity("DirectoryService.Domain.LocationEntity.Location", b =>
                {
                    b.Navigation("DepartmentLocations");
                });

            modelBuilder.Entity("DirectoryService.Domain.PositionEntity.Position", b =>
                {
                    b.Navigation("DepartmentPositions");
                });
#pragma warning restore 612, 618
        }
    }
}
